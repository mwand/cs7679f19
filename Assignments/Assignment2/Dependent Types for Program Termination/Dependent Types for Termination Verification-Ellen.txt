Dependent Types for Program Termination Verification

\subsection{Original text:}

We can simply transform $ML_{0}^{\Pi, \Sigma }$ into a
language $ML_0$ by erasing all syntax related to type index
expressions in $ML_0^{\Pi, \Sigma}$.  Then $ML_0$ basically extends
simply typed $\lambda$-calculus with recursion.  Let $|e|$ be the
erasure of expression $e$.  We have $e_1$ reducing to $e_2$ in
$ML_0^{\Pi, \Sigma}$ implies $|e_1|$ reducing to $|e_2|$ (in $ML_0$).
Therefore, if $e$ is terminating in $ML_0^{\Pi, \Sigma}$, then $|e|$
is terminating in $ML_0$.  This is a crucial point since the
evaluation of a program in $ML_0^{\Pi, \Sigma}$ is (most likely) done
through the evaluation of its erasure in $ML_0$. Please find more
details on this issue in [18, 14].

\subsection{Updated version of bold text:} In this section we discuss
an interesting side result about erasure.

First we define a new language $ML_0$ as the result of erasing all
syntax related to type index expressions from our language $ML_0^{\Pi,
\Sigma}$.  Now, we discuss the relation between reduction in $ML_0$
and in the original $ML_0^{\Pi, \Sigma}$.

Let $|e|$ be the erasure of expression $e$.  We know that if $e_1$
reduces to $e_2$ in $ML_0^{\Pi, \Sigma}$, then $|e_1|$ reduces to
$|e_2|$ in $ML_0$.  Therefore, if $e$ is terminating in $ML_0^{\Pi,
\Sigma}$, then $|e|$ is terminating in $ML_0$.  This is related to
some interesting results we focused on in previous work; check out
[14, 18] for a detailed discussion.
